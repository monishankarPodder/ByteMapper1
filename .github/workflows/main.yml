name: Reverse Coverage Mapping

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  reverse-mapping:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build without tests
        run: mvn clean install -DskipTests

      - name: Find test methods
        run: |
          mkdir -p test-list
          find app/src/test/java -name "*.java" -print0 | xargs -0 grep -E "@Test" | cut -d: -f1 | sort -u | while read file; do
            grep -E "public void" "$file" | sed -nE 's/.*public void ([a-zA-Z0-9_]+).*/\1/p'
          done > test-list/tests.txt
          echo "Detected tests:"
          cat test-list/tests.txt

      - name: Run tests individually and collect JaCoCo
        run: |
          mkdir -p coverage-data
          while IFS= read -r test; do
            echo "Running test: $test"
            mvn test -pl app -Dtest="**.*#$test"
            cp app/target/jacoco.exec "coverage-data/${test}.exec"
          done < test-list/tests.txt

      - name: Install JaCoCo CLI
        run: |
         curl -L -o jacococli.zip https://repo1.maven.org/maven2/org/jacoco/jacoco/0.8.11/jacoco-0.8.11.zip
         unzip jacococli.zip -d jacococli-full
         mkdir -p jacococli
         cp jacococli-full/lib/jacococli.jar jacococli/



      - name: Generate XML reports from each .exec
        run: |
          mkdir -p reverse-mapping
          for execFile in coverage-data/*.exec; do
            testName=$(basename "$execFile" .exec)
            java -jar jacococli/jacococli.jar report "$execFile" \
              --classfiles app/target/classes \
              --sourcefiles app/src/main/java \
              --xml reverse-mapping/"$testName".xml
          done

      - name: Generate method-to-test mapping JSON
        run: |
          mkdir -p reverse-mapping
          echo 'import os' > reverse-mapping/gen_mapping.py
          echo 'import xml.etree.ElementTree as ET' >> reverse-mapping/gen_mapping.py
          echo 'import json' >> reverse-mapping/gen_mapping.py
          echo '' >> reverse-mapping/gen_mapping.py
          echo 'mapping = {}' >> reverse-mapping/gen_mapping.py
          echo '' >> reverse-mapping/gen_mapping.py
          echo 'for file in os.listdir("reverse-mapping"):' >> reverse-mapping/gen_mapping.py
          echo '    if not file.endswith(".xml"):' >> reverse-mapping/gen_mapping.py
          echo '        continue' >> reverse-mapping/gen_mapping.py
          echo '    test_name = file[:-4]' >> reverse-mapping/gen_mapping.py
          echo '    tree = ET.parse(f"reverse-mapping/{file}")' >> reverse-mapping/gen_mapping.py
          echo '    root = tree.getroot()' >> reverse-mapping/gen_mapping.py
          echo '    for pkg in root.findall(".//package"):' >> reverse-mapping/gen_mapping.py
          echo '        for cls in pkg.findall("class"):' >> reverse-mapping/gen_mapping.py
          echo '            for method in cls.findall("method"):' >> reverse-mapping/gen_mapping.py
          echo '                fqmn = f"{pkg.get(\"name\").replace(\"/\", \".\")}.{cls.get(\"name\")}.{method.get(\"name\")}"' >> reverse-mapping/gen_mapping.py
          echo '                mapping.setdefault(fqmn, []).append(test_name)' >> reverse-mapping/gen_mapping.py
          echo '' >> reverse-mapping/gen_mapping.py
          echo 'with open("reverse-mapping/method_test_mapping.json", "w") as f:' >> reverse-mapping/gen_mapping.py
          echo '    json.dump(mapping, f, indent=2)' >> reverse-mapping/gen_mapping.py
          python3 reverse-mapping/gen_mapping.py

      - name: Upload method-to-test mapping
        uses: actions/upload-artifact@v4
        with:
          name: method_test_mapping
          path: reverse-mapping/method_test_mapping.json
